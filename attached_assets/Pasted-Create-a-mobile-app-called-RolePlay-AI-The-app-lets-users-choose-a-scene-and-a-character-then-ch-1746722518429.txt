Create a mobile app called “RolePlay AI”.
The app lets users choose a scene and a character, then chat with an LLM that acts in-character.
Design for phone first, tablet friendly.

Navigation (bottom tab bar, 4 items)
• Scenes
• Characters
• Chats
• Profile

Scenes tab
• Masonry grid of cards (image, scene name, one-line description, age rating chip).
• Horizontal filter chips above the grid: Location, Mood, Rating.
• Long-press on any card shows a preview modal (background art + two sample lines of dialogue) with a “Start Chat” button.
• Floating “+ / 🎲” button bottom-right → quick create new scene or roll random scene.

Characters tab
Split view:
• Left panel = scrollable list (avatar, nickname, 2–3 trait chips such as “Tsundere”, “Healer”).
• Right panel = details of selected character: full backstory, personality traits[], selectable voice style, “Test Voice” TTS button.
• Top-right search and multi-select filter (traits, occupation, genre).
• Secondary action: “AI Generate Character” → user enters keywords, app calls DALL-E or Stable Diffusion for avatar and auto-fills backstory.

Chats tab
• Standard bubble chat. User bubbles right; AI bubbles left with gradient background.
• Sticky info bar at top: current Scene + Character names, emoji mood icon, remaining token balance.
• Input tray:
– left icon opens “Tone presets” (Gentle / Playful / Dark) and slash-commands (/think, /whisper).
– multi-line text field supports markdown bold/italic.
– send button shows ripple animation while waiting.
• Long-press any AI bubble → actions: Copy, Regenerate, Change Tone, Save to Script.
• Show typing dots while the model streams.

Profile tab
• Dashboard cards: today’s chat minutes, favourite characters, most-used scenes.
• Toggles: Context window length (k messages), Temperature slider, “Enable Character Memory”.
• NSFW filter slider (0 – 3).
• Buttons: “Clear Chat History”, “Export Script”, “Subscribe / Buy Tokens”.

Onboarding (first launch)
– 3 slide carousel (illustrations) explaining Choose Scene → Pick Character → Chat Immersively.
– Final step asks for preferred starting mood (Romance / Comfort / Adventure) to seed recommendations.

Theming & Motion
• Colour palette: deep midnight blue background, neon accent gradients.
• Type: Poppins for headings, Noto Sans for body.
• All cards and buttons use 2 xl corner radius and soft shadow.
• Page transitions and card hover use subtle scale-up with Framer-Motion-style spring.

LLM Integration
• Use OpenAI GPT-4o (or latest) via REST.
• Prompt template per request:

css
Copy
Edit
system: You are in the {scene_description}.  
assistant: Your persona: {character_backstory}. Speak with this voice: {voice_style}. Stay in character.  
user: {player_input}
• Sliding window keeps last k exchanges; older context summarized and stored in DB.
• Moderation: call OpenAI Moderation API before each send; additionally run local keyword blacklist. Block or warn on violations.

Data models
Scene {id, name, description, imageURL, rating}
Character {id, name, avatarURL, traits[], backstory, voiceStyle}
ChatMessage {id, role, text, timestamp, sceneId, characterId}
UserPrefs {temperature, memoryEnabled, nsfwLevel, …}

Optional v1.5+ roadmap hooks
– Add TTS playback of AI lines via ElevenLabs.
– Group scenes into a marketplace with in-app purchases.
– Enable co-op “script writing” where multiple users enter the same chat room.

Constraint notes for the builder
• Aim for WCAG AA contrast ratios.
• Use provider-agnostic REST calls so the LLM endpoint can be swapped.
• Build in a global error banner for quota or moderation failures.
• Localise all user-facing text via string table.